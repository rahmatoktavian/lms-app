{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useOnPreventRemove, { shouldPreventRemove } from \"./useOnPreventRemove\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      actionListeners = _ref.actionListeners,\n      beforeRemoveListeners = _ref.beforeRemoveListeners,\n      routerConfigOptions = _ref.routerConfigOptions,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addListenerParent = _React$useContext.addListener,\n      onDispatchAction = _React$useContext.onDispatchAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          var isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"mappings":"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","names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","_ref","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","useContext","onActionParent","onAction","onRouteFocusParent","onRouteFocus","addListenerParent","addListener","onDispatchAction","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"sourceRoot":"../../src","sources":["useOnAction.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"defaultStatus\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexport default function DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n      defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var router = TabRouter(rest);\n\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: [].concat(_toConsumableArray(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","router","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","_ref2","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sourceRoot":"../../src","sources":["DrawerRouter.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
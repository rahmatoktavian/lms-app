{"ast":null,"code":"import * as React from 'react';\nimport { useContext } from 'react';\nimport RN from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Dialog, Toast } from \"./\";\nimport { Color } from \"../service\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport var Root = function Root(_ref) {\n  var _RN$useColorScheme;\n\n  var theme = _ref.theme,\n      colors = _ref.colors,\n      children = _ref.children,\n      dialogConfig = _ref.dialogConfig,\n      toastConfig = _ref.toastConfig;\n  var colorScheme = (_RN$useColorScheme = RN.useColorScheme) === null || _RN$useColorScheme === void 0 ? void 0 : _RN$useColorScheme.call(RN);\n  var safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n  var isDark = (theme != null ? theme : colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return React.createElement(SafeAreaProvider, null, React.createElement(View, {\n      style: styles.content\n    }, React.createElement(React.Fragment, null, React.createElement(Dialog, {\n      ref: Dialog.instance,\n      isDark: isDark,\n      config: dialogConfig\n    }), React.createElement(Toast, {\n      ref: Toast.instance,\n      isDark: isDark,\n      config: toastConfig\n    }), children)));\n  }\n\n  return React.createElement(View, {\n    style: styles.content\n  }, React.createElement(React.Fragment, null, React.createElement(Dialog, {\n    ref: Dialog.instance,\n    isDark: isDark,\n    config: dialogConfig\n  }), React.createElement(Toast, {\n    ref: Toast.instance,\n    isDark: isDark,\n    config: toastConfig\n  }), children));\n};\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAuBC,UAAvB,QAAyC,OAAzC;OACOC,E;;AACP,SAASC,qBAAT,EAAgCC,gBAAhC,QAAwD,gCAAxD;AACA,SAASC,MAAT,EAA8CC,KAA9C;AACA,SAASC,KAAT;;AAWA,OAAO,IAAMC,IAAqC,GAAG,SAAxCA,IAAwC,OAA4D;EAAA;;EAAA,IAAzDC,KAAyD,QAAzDA,KAAyD;EAAA,IAAlDC,MAAkD,QAAlDA,MAAkD;EAAA,IAA1CC,QAA0C,QAA1CA,QAA0C;EAAA,IAAhCC,YAAgC,QAAhCA,YAAgC;EAAA,IAAlBC,WAAkB,QAAlBA,WAAkB;EAC/G,IAAMC,WAAW,yBAAGZ,EAAE,CAACa,cAAN,uDAAGC,2BAApB;EACA,IAAMC,qBAAqB,GAAGhB,UAAU,CAACE,qBAAD,CAAxC;EACAI,KAAK,CAACW,YAANX,GAAqBG,MAArBH;EAEA,IAAMY,MAAM,GAAG,CAACV,KAAD,WAACA,KAAD,GAAUK,WAAV,MAA2B,MAA1C;;EAEA,IAAIG,qBAAqB,KAAK,IAA9B,EAAoC;IAClC,OACEjB,oBAACI,gBAAD,QACEJ,oBAACoB,IAAD;MAAMC,KAAK,EAAEC,MAAM,CAACC;IAApB,GACEvB,oBAACA,KAAD,CAAOwB,QAAP,QACExB,oBAACK,MAAD;MAAQoB,GAAG,EAAEpB,MAAM,CAACqB,QAApB;MAA8BP,MAAM,EAAEA,MAAtC;MAA8CQ,MAAM,EAAEf;IAAtD,EADF,EAEEZ,oBAACM,KAAD;MAAOmB,GAAG,EAAEnB,KAAK,CAACoB,QAAlB;MAA4BP,MAAM,EAAEA,MAApC;MAA4CQ,MAAM,EAAEd;IAApD,EAFF,EAGGF,QAHH,CADF,CADF,CADF;EAWD;;EAED,OACEX,oBAACoB,IAAD;IAAMC,KAAK,EAAEC,MAAM,CAACC;EAApB,GACEvB,oBAACA,KAAD,CAAOwB,QAAP,QACExB,oBAACK,MAAD;IAAQoB,GAAG,EAAEpB,MAAM,CAACqB,QAApB;IAA8BP,MAAM,EAAEA,MAAtC;IAA8CQ,MAAM,EAAEf;EAAtD,EADF,EAEEZ,oBAACM,KAAD;IAAOmB,GAAG,EAAEnB,KAAK,CAACoB,QAAlB;IAA4BP,MAAM,EAAEA,MAApC;IAA4CQ,MAAM,EAAEd;EAApD,EAFF,EAGGF,QAHH,CADF,CADF;AArBK;AAgCP,IAAMW,MAAM,GAAGM,UAAU,CAACC,MAAXD,CAAkB;EAC/BL,OAAO,EAAE;IACPO,IAAI,EAAE;EADC;AADsB,CAAlBF,CAAf","names":["React","useContext","RN","SafeAreaInsetsContext","SafeAreaProvider","Dialog","Toast","Color","Root","theme","colors","children","dialogConfig","toastConfig","colorScheme","useColorScheme","_RN$useColorScheme","safeAreaInsetsContext","colorsCustom","isDark","View","style","styles","content","Fragment","ref","instance","config","StyleSheet","create","flex"],"sources":["Root.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, useContext } from 'react';\nimport RN, { View } from 'react-native';\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Dialog, IConfigDialog, IConfigToast, Toast } from './';\nimport { Color, IColors } from '../service';\nimport { StyleSheet } from 'react-native';\n\ntype IProps = {\n  dialogConfig?: Pick<IConfigDialog, 'closeOnOverlayTap' | 'autoClose'>;\n  toastConfig?: Pick<IConfigToast, 'autoClose' | 'titleStyle' | 'textBodyStyle'>;\n  theme?: 'light' | 'dark';\n  colors?: [IColors, IColors] /** ['light_colors' , 'dark_colors'] */;\n  children: ReactElement | ReactElement[];\n};\n\nexport const Root: React.FunctionComponent<IProps> = ({ theme, colors, children, dialogConfig, toastConfig }) => {\n  const colorScheme = RN.useColorScheme?.();\n  const safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n\n  const isDark = (theme ?? colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return (\n      <SafeAreaProvider>\n        <View style={styles.content}>\n          <React.Fragment>\n            <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n            <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n            {children}\n          </React.Fragment>\n        </View>\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    <View style={styles.content}>\n      <React.Fragment>\n        <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n        <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n        {children}\n      </React.Fragment>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(ref) {\n  var navigation = useNavigation();\n  var route = useRoute();\n  React.useEffect(function () {\n    var tabNavigations = [];\n    var currentNavigation = navigation;\n\n    while (currentNavigation) {\n      if (currentNavigation.getState().type === 'tab') {\n        tabNavigations.push(currentNavigation);\n      }\n\n      currentNavigation = currentNavigation.getParent();\n    }\n\n    if (tabNavigations.length === 0) {\n      return;\n    }\n\n    var unsubscribers = tabNavigations.map(function (tab) {\n      return tab.addListener('tabPress', function (e) {\n        var isFocused = navigation.isFocused();\n        var isFirst = tabNavigations.includes(navigation) || navigation.getState().routes[0].key === route.key;\n        requestAnimationFrame(function () {\n          var scrollable = getScrollableNode(ref);\n\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({\n                y: 0,\n                animated: true\n              });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({\n                offset: 0,\n                animated: true\n              });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({\n                y: 0,\n                animated: true\n              });\n            }\n          }\n        });\n      });\n    });\n    return function () {\n      unsubscribers.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n    };\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"mappings":"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","names":["useNavigation","useRoute","React","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","useEffect","tabNavigations","currentNavigation","getState","type","push","getParent","length","unsubscribers","map","tab","addListener","e","isFocused","isFirst","includes","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","y","animated","scrollToOffset","offset","scrollResponderScrollTo","forEach","unsubscribe"],"sourceRoot":"../../src","sources":["useScrollToTop.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}